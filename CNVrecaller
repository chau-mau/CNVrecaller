#!/usr/bin/env python3

import argparse
import os

def binary_coding(genotype):
    """Convert genotype to binary coding."""
    if genotype == "1/1":
        return "1"  # Homozygous variant
    elif genotype in ["0/0", "0/1", "1/0"]:
        return "0"  # Homozygous reference or heterozygous
    elif genotype == "./.":
        return "N"  # Representing missing data
    else:
        return "E"  # Error for unexpected genotypes

def is_valid_genotype(genotype):
    """Check if the genotype is valid."""
    valid_genotypes = ["0/0", "0/1", "1/0", "1/1", "./."]
    return genotype in valid_genotypes

def process_vcf(input_file, output_file, coding_type):
    try:
        with open(input_file, 'r') as f_in, open(output_file, 'w') as f_out:
            for line in f_in:
                if line.startswith('#'):
                    f_out.write(line)
                else:
                    fields = line.strip().split('\t')
                    samples = fields[9:]

                    if coding_type == 'binary':
                        coded_genotypes = [
                            binary_coding(genotype.split(':')[0]) if is_valid_genotype(genotype.split(':')[0]) else "E"
                            for genotype in samples
                        ]

                    fields[8] = "GT"  # Update FORMAT field
                    fields[9:] = coded_genotypes  # Update genotypes with coded values

                    updated_line = '\t'.join(fields) + '\n'
                    f_out.write(updated_line)

    except FileNotFoundError:
        print(f"Error: The file {input_file} was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Convert VCF genotypes to binary coding.')
    parser.add_argument('-m', '--mode', choices=['binary'], required=True, help='Coding mode: binary')
    parser.add_argument('-i', '--input', required=True, help='Input VCF file')
    parser.add_argument('-o', '--output', required=True, help='Output VCF file')

    args = parser.parse_args()

    process_vcf(args.input, args.output, args.mode)
